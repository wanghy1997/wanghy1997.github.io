import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as n,o}from"./app-B-wDcIMq.js";const a={};function p(d,e){return o(),t("div",null,[...e[0]||(e[0]=[n('<p>Markdown 中我们经常会看到这样的描述目录的结构，但是 Markdown 并没有这样的语法用来生成这样的目录描述，那是怎么搞的呢？难道一个个字符的输入？</p><p>实际上一些第三方工具可以生成这样的目录结构文本，然后拷贝到 Markdown 中。</p><p>比如在 Mac 上，可以使用 brew install tree 安装 tree 命令，这个命令就能用来在终端中输出这样的目录结构文本，然后拷贝就行。Linux 和 Windows 也有 tree 命令，具体使用方式自行 Google 一下就行。</p><p>tree 命令部分常用命令<br> tree -a 显示所有<br> tree -d 只显示文档夹<br> tree -L n 显示项目的层级，n表示层级数，比如想要显示项目三层结构，可以用tree -l 3；<br> tree -I pattern 用于过滤不想要显示的文档或者文档夹。比如你想要过滤项目中的 node_modules 文档夹，可以使用 tree -I &quot;node_modules&quot;；<br> tree &gt; <a href="http://tree.md" target="_blank" rel="noopener noreferrer">tree.md</a> 将项目结构输出到 <a href="http://tree.md" target="_blank" rel="noopener noreferrer">tree.md</a> 这个文档<br> tree -N 防止中文名乱码<br> 生成目录，过滤 node_modules，防止中文乱码，输出到 <a href="http://xn--w2t15pgnn9uh.md" target="_blank" rel="noopener noreferrer">目录结构.md</a> 的 demo:</p><p>tree -N -d -I &quot;node_modules&quot; &gt; <a href="http://xn--w2t15pgnn9uh.md" target="_blank" rel="noopener noreferrer">目录结构.md</a></p>',5)])])}const i=r(a,[["render",p]]),c=JSON.parse(`{"path":"/coooder/mac/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6.html","title":"","lang":"en-US","frontmatter":{"description":"Markdown 中我们经常会看到这样的描述目录的结构，但是 Markdown 并没有这样的语法用来生成这样的目录描述，那是怎么搞的呢？难道一个个字符的输入？ 实际上一些第三方工具可以生成这样的目录结构文本，然后拷贝到 Markdown 中。 比如在 Mac 上，可以使用 brew install tree 安装 tree 命令，这个命令就能用来在终端...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-17T15:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hongyi Wang\\",\\"url\\":\\"https://wanghy1997.github.io/wanghy1997\\"}]}"],["meta",{"property":"og:url","content":"https://wanghy1997.github.io/wanghy1997/coooder/mac/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Hongyi's Blog"}],["meta",{"property":"og:description","content":"Markdown 中我们经常会看到这样的描述目录的结构，但是 Markdown 并没有这样的语法用来生成这样的目录描述，那是怎么搞的呢？难道一个个字符的输入？ 实际上一些第三方工具可以生成这样的目录结构文本，然后拷贝到 Markdown 中。 比如在 Mac 上，可以使用 brew install tree 安装 tree 命令，这个命令就能用来在终端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-09-17T15:06:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-17T15:06:21.000Z"}]]},"git":{"createdTime":1758121581000,"updatedTime":1758121581000,"contributors":[{"name":"whymbp","username":"whymbp","email":"why_6267@163.com","commits":1,"url":"https://github.com/whymbp"}]},"readingTime":{"minutes":1.04,"words":311},"filePathRelative":"coooder/mac/mac常用软件.md","excerpt":"<p>Markdown 中我们经常会看到这样的描述目录的结构，但是 Markdown 并没有这样的语法用来生成这样的目录描述，那是怎么搞的呢？难道一个个字符的输入？</p>\\n<p>实际上一些第三方工具可以生成这样的目录结构文本，然后拷贝到 Markdown 中。</p>\\n<p>比如在 Mac 上，可以使用 brew install tree 安装 tree 命令，这个命令就能用来在终端中输出这样的目录结构文本，然后拷贝就行。Linux 和 Windows 也有 tree 命令，具体使用方式自行 Google 一下就行。</p>\\n<p>tree 命令部分常用命令<br>\\ntree -a 显示所有<br>\\ntree -d 只显示文档夹<br>\\ntree -L n 显示项目的层级，n表示层级数，比如想要显示项目三层结构，可以用tree -l 3；<br>\\ntree -I pattern 用于过滤不想要显示的文档或者文档夹。比如你想要过滤项目中的 node_modules 文档夹，可以使用 tree -I \\"node_modules\\"；<br>\\ntree &gt; <a href=\\"http://tree.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">tree.md</a> 将项目结构输出到 <a href=\\"http://tree.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">tree.md</a> 这个文档<br>\\ntree -N 防止中文名乱码<br>\\n生成目录，过滤 node_modules，防止中文乱码，输出到 <a href=\\"http://xn--w2t15pgnn9uh.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">目录结构.md</a> 的 demo:</p>","autoDesc":true}`);export{i as comp,c as data};
